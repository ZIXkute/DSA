// Array Stack Var2
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 10

typedef struct {
    int items[MAX];
    int top;
} Stack;

Stack* initialize() {
    Stack* s = (Stack*)malloc(sizeof(Stack));
    if (s == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    s->top = MAX; 
    return s;
}

bool isFull(Stack* s) {
    return s->top == 0;
}

bool isEmpty(Stack* s) {
    return s->top == MAX;
}

void push(Stack* s, int value) {
    if (isFull(s)) {
        printf("Stack Overflow! Cannot push %d\n", value);
        return;
    }
    s->items[--s->top] = value; 
}

int pop(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack Underflow!\n");
        return -1; 
    }
    return s->items[s->top++]; 
}

int peek(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack is empty!\n");
        return -1;
    }
    return s->items[s->top];
}

int top(Stack* s) {
    return s->top;
}

void display(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack is empty!\n");
        return;
    }
    printf("Stack elements (top to bottom):\n");
    for (int i = s->top; i < MAX; i++) {
        printf("%d\n", s->items[i]);
    }
}

int main() {
    Stack* s = initialize();

    push(s, 10);
    push(s, 20);
    push(s, 30);
    display(s);

    printf("Peek: %d\n", peek(s));
    printf("Pop: %d\n", pop(s));
    display(s);

    printf("Top index: %d\n", top(s));

    free(s);
    return 0;
}
