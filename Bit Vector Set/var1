// bit vector set var1
#include <stdio.h>
#include <stdbool.h>

#define MAX_BITS 8 * sizeof(unsigned char) 

void initialize(unsigned char *set) {
    *set = 0;
}

void insert(unsigned char *set, int element) {
    if (element < 0 || element >= MAX_BITS) return;
    unsigned char mask = 1 << element;
    *set |= mask;
}

void delete(unsigned char *set, int element) {
    if (element < 0 || element >= MAX_BITS) return;
    unsigned char mask = ~(1 << element);
    *set &= mask;
}

bool find(unsigned char set, int element) {
    if (element < 0 || element >= MAX_BITS) return false;
    unsigned char mask = 1 << element;
    return (set & mask) != 0;
}

unsigned char set_union(unsigned char A, unsigned char B) {
    return A | B;
}

unsigned char set_intersection(unsigned char A, unsigned char B) {
    return A & B;
}

unsigned char set_difference(unsigned char A, unsigned char B) {
    return A & (~B);
}

void display(unsigned char set) {
    printf("{ ");
    for (int i = 0; i < MAX_BITS; i++) {
        if (find(set, i))
            printf("%d ", i);
    }
    printf("}\n");
}

int main() {
    unsigned char A, B, C;

    initialize(&A);
    initialize(&B);

    insert(&A, 1);
    insert(&A, 3);
    insert(&A, 5);

    insert(&B, 2);
    insert(&B, 3);
    insert(&B, 6);

    printf("Set A: ");
    display(A);

    printf("Set B: ");
    display(B);

    C = set_union(A, B);
    printf("Union (A ∪ B): ");
    display(C);

    C = set_intersection(A, B);
    printf("Intersection (A ∩ B): ");
    display(C);

    C = set_difference(A, B);
    printf("Difference (A - B): ");
    display(C);

    delete(&A, 3);
    printf("After deleting 3 from A: ");
    display(A);

    printf("Find 5 in A: %s\n", find(A, 5) ? "Yes" : "No");
    printf("Find 3 in A: %s\n", find(A, 3) ? "Yes" : "No");

    return 0;
}
