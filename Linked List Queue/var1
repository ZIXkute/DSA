// Linked List Queue
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct node{
    int data;
    struct node *next;
}Node;

typedef struct{
    Node *front;
    Node *rear;
}Queue;

Queue *initialize(){
    Queue *q = malloc(sizeof(Queue));
    if(q == NULL){
        printf("Failed\n");
        exit(1);
    }
    q->front = NULL;
    q->rear = NULL;
    return q;
}

bool isFull(Queue *q){
    return false;
}

bool isEmpty(Queue *q){
    return q->front == NULL;
}

void enqueue(Queue *q, int value){
    Node *newNode = malloc(sizeof(Node));
    if(newNode == NULL){
        printf("Failed %d\n", value);
        return;
    }
    newNode->data = value;
    newNode->next = NULL;
    
    if(isEmpty(q)){
        q->front = newNode;
        q->rear = newNode;
    }else{
        q->rear->next = newNode;
        q->rear = newNode;
    }
}

int dequeue(Queue *q){
    if(isEmpty(q)){
        printf("Cant dq\n");
        return -1;
    }
    Node *temp = q->front;
    int value = temp->data;
    q->front = q->front->next;
    
    if(q->front == NULL)
    q->rear = NULL;
    
    free(temp);
    return value;
}

int front(Queue *q){
    if(isEmpty(q)){
        printf("empty\n");
        return -1;
    }
    return q->front->data;
}

void display(Queue *q){
    if(isEmpty(q)){
        printf("Empty\n");
        return;
    }
    Node *current = q->front;
    printf("Queue elems(front to rear):\n");
    while(current != NULL){
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    Queue *q = initialize();
    
    enqueue(q, 1);
    enqueue(q, 3);
    enqueue(q, 5);
    display(q);
    
    printf("Front: %d\n", front(q));
    
    printf("Dequeued: %d\n", dequeue(q));
    display(q);
    
    enqueue(q, 4);
    display(q);

    return 0;
}
